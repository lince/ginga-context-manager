AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gingancl, 0.11.2)

AC_LANG_CPLUSPLUS
AC_PROG_CXX([g++])
AM_PROG_LIBTOOL

CXXFLAGS="-fPIC $CXXFLAGS"
CFLAGS="-fPIC $CFLAGS"

# Bring additional directories where things might be found into our
# search path. I don't know why autoconf doesn't do this by default
for spfx in /usr/lib/ /usr/local/lib/ /usr/local/lib/ginga/ /usr/local/lib/ginga/iocontents; do
if test -d ${spfx}; then
LDFLAGS="-L${spfx} $LDFLAGS"
fi
done

for spfx in /usr/include/ /usr/local/include/ /usr/local/include/ginga/; do
if test -d ${spfx}; then
CPPFLAGS="-I${spfx} $CPPFLAGS"
fi
done

###########
# HEADERS #
###########

##################
# TeleMidia Util #
##################
AC_CHECK_HEADER([util/functions.h], [], AC_MSG_ERROR([

Couldn't find TeleMidia Util headers.
Please install telemidia-util project.

]))

###########
# NCL 3.0 #
###########
AC_CHECK_HEADER([ncl/Entity.h], [], AC_MSG_ERROR([

Couldn't find NCL 3.0 headers.
Please install ncl30 project.

]))

#####################
# NCL 3.0 Converter #
#####################
#TODO: resolve header dependencies
#AC_CHECK_HEADER([], [], AC_MSG_ERROR([
#
#Couldn't find  headers.
#Please install .
#
#]))


############################
# Ginga CC Context Manager #
############################
AC_CHECK_HEADER([contextmanager/IContextManager.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC Context Manager headers.
Please install gingacc-contextmanager project.

]))

#########################
# Ginga CC Multi Device #
#########################
AC_CHECK_HEADER([multidevice/IRemoteDeviceManager.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC Multi Device headers.
Please install gingacc-multidevice project.

]))

##########################
# Ginga CC System Thread #
##########################
AC_CHECK_HEADER([system/thread/Thread.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC System Thread headers.
Please install gingacc-system project.

]))

###########################################
# Ginga Common Core Interactivity Channel #
###########################################
AC_CHECK_HEADER([ic/IInteractiveChannelListener.h], [], AC_MSG_ERROR([

Couldn't find Ginga Common Core Interactivity Channel headers.
Please install gingacc-ic project.

]))

#####################
# Recommender check #
###############

recommender=no
AC_ARG_ENABLE(recommender,
  [  --enable-recommender    build recommender support [[default=no]]],
  enable_recommender="$enableval", enable_recommender=no)

if test x$enable_recommender = xyes; then
      AC_CHECK_HEADER(recommender/sqlite3.h,
        recommender=yes
        NCLET_LIBS='-lrecommender'
        AC_DEFINE(HAVE_RECOMMENDER, 1, [Def to 1 if you have recommender support.]),
        AC_MSG_WARN([
*** Header not found -- recommender support will not be built.]))
fi

AM_CONDITIONAL(RECOMMENDER, test x$recommender = xyes)
AC_SUBST(RECOMMENDER_LIBS)


#########################
# Profile Monitor check #
#########################

profilemonitor=no
AC_ARG_ENABLE(profilemonitor,
  [  --enable-profilemonitor    build profilemonitor support [[default=no]]],
  enable_profilemonitor="$enableval", enable_profilemonitor=no)

if test x$enable_profilemonitor = xyes; then
        AC_DEFINE(HAVE_PROFILEMONITOR, 1, [Def to 1 if you have profilemonitor support.]),
fi


############################
# Ginga Common Core Player #
############################
AC_CHECK_HEADER([player/IPlayerListener.h], [], AC_MSG_ERROR([

Couldn't find Ginga Common Core Player headers.
Please install gingacc-player project.

]))


########
# LIBS #
########

##################
# TeleMidia Util #
##################
AC_HAVE_LIBRARY(telemidiautil, , AC_ERROR([

Couldn't find TeleMidia Util library.
Please install TeleMidia Util Library.

]))

###########
# NCL 3.0 #
###########
AC_HAVE_LIBRARY(ncl30, , AC_ERROR([

Couldn't find ncl30 library.
Please install NCL 3.0.

]))

##########################
# Ginga CC System Thread #
##########################
AC_HAVE_LIBRARY(gingaccsystemthread, , AC_ERROR([

Couldn't find Ginga CC System Thread library.
Please install Ginga CC System Thread Library.

]))

############################
# Ginga Common Core Player #
############################
AC_HAVE_LIBRARY(gingaccplayer, , AC_ERROR([

Couldn't find gingaccplayer library.
Please install Ginga Common Core Player.

]))


##############
# JAVA check #
##############
ncletplayer=no
AC_ARG_ENABLE(ncletplayer,
  [  --enable-ncletplayer    build nclet support [[default=no]]],
  enable_ncletplayer="$enableval", enable_ncletplayer=no)

if test x$enable_ncletplayer = xyes; then
      AC_CHECK_HEADER(player/NCLetPlayer.h,
        ncletplayer=yes
        NCLET_LIBS='-lgingaccplayer'
        AC_DEFINE(HAVE_NCLET, 1, [Def to 1 if you have nclet support.]),
        AC_MSG_WARN([
*** Header not found -- nclet support will not be built.]))
fi

AM_CONDITIONAL(NCLET, test x$ncletplayer = xyes)
AC_SUBST(NCLET_LIBS)

############################################
# Offering a non-componentized alternative #
############################################
components=yes
AC_ARG_ENABLE(components,
  [  --enable-components build project using components [[default=yes]]],
  enable_components="$enableval", enable_components=yes)

if test x$enable_components = xno; then
   COMPONENTS_LIBS='-lginganclaavpadapter -lginganclapppadapter \
    -lginganclchapadapter -lginganclimgpadapter -lgingancllkspadapter \
    -lginganclluapadapter -lginganclnclpadapter -lginganclpavpadapter \
    -lginganclpltpadapter -lginganclsubpadapter \
    -lncl30confrancl -lncl30confraxml \
    -lncl30connclncm -lncl30consmlncm -lgingaccdataprocncl -lgingacciccurlic \
    -lgingaccsysctsdfbav -lgingaccsysctsdfbf -lgingaccsysctsfs \
    -lgingaccsysctsimgdfb -ltelemidialinks \
    -lgingacccontextmanager -lgingaccdataprocessing -lgingaccic -lgingaccmd \
    -lgingaccplayer -lgingaccsystemio -lgingaccsystemiocodemap \
    -lgingaccsystemiodfb -lgingaccsystemthread -lgingacctsparser \
    -lgingacctuner -lgingancl \
    -lgingancladaptation -lgingancladapter -lginganclemconverter \
    -lginganclfocus -lginganclgfx -lginganclmd -lginganclmodel \
    -lginganclprefetch -lncl30 -ltelemidiautil \
    -lgingaccplaani -lgingaccplaavp -lgingaccplacha -lgingaccplaimg \
    -lgingaccplalks -lgingaccplalua -lgingaccplapav -lgingaccplaplt \
    -lgingaccplasrt -lgingaccplatxt -lgingaccplawdg -llua \
    -lxerces-c -lxerces-depdom \
    -lcore -lxine -lfusionsound -ldirectfb -lmad -lfusion -ldirect \
    -L/usr/local/lib/ginga/ -L/usr/local/lib -L/usr/local/lib/ginga/cm/ \
    -L/usr/local/lib/ginga/iocontents/ -L/usr/local/lib/ginga/converters/ \
    -L/usr/local/lib/ginga/adapters/ -L/usr/local/lib/ginga/ic/ \
    -L/usr/local/lib/ginga/players/ -L/usr/local/lib/ginga/dp \
    -L/usr/local/lib/lua/5.1 -L/usr/local/lib/lua/5.1/socket'
   COMPONENTS_INCS='-I/usr/local/include/ginga -I/usr/local/include/directfb/'
   AC_DEFINE(HAVE_COMPSUPPORT, 0, [Def to 0 if you don't have Component support.])
   AC_MSG_WARN([*** Component support will not be built.])

else
   COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/'
   COMPONENTS_INCS='-I/usr/local/include/ginga'
   AC_DEFINE(HAVE_COMPSUPPORT, 1, [Def to 1 if you have Component support.])
   AC_MSG_RESULT([*** Component support will be built.])
fi

AM_CONDITIONAL(COMPONENTS, test "$enable_components" = "no")
AC_SUBST(COMPONENTS_LIBS)
AC_SUBST(COMPONENTS_INCS)


AC_OUTPUT(Makefile files/Makefile include/model/Makefile
    include/prefetch/Makefile include/adapters/Makefile
    include/multidevice/Makefile include/Makefile
    src/model/Makefile src/adaptation/Makefile
    src/emconverter/Makefile src/adapters/Makefile
    src/adapters/av/Makefile src/adapters/image/Makefile
    src/adapters/text/Makefile
    src/adapters/application/Makefile
    src/adapters/application/declarative/ncl/Makefile
    src/adapters/application/declarative/xhtml/Makefile
    src/adapters/application/imperative/lua/Makefile
    src/multidevice/Makefile src/focus/Makefile
    src/gfx/Makefile src/prefetch/Makefile
    src/Makefile test/Makefile)

AC_MSG_RESULT([
Build options: 
  Module directory                    $MODULEDIR
  Ginga CC Player With NCLET Support  $ncletplayer
])
