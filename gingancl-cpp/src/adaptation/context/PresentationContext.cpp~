/******************************************************************************
Este arquivo eh parte da implementacao do ambiente declarativo do middleware
Ginga (Ginga-NCL).

Direitos Autorais Reservados (c) 1989-2007 PUC-Rio/Laboratorio TeleMidia

Este programa eh software livre; voce pode redistribui-lo e/ou modificah-lo sob
os termos da Licenca Publica Geral GNU versao 2 conforme publicada pela Free
Software Foundation.

Este programa eh distribuido na expectativa de que seja util, porem, SEM
NENHUMA GARANTIA; nem mesmo a garantia implicita de COMERCIABILIDADE OU
ADEQUACAO A UMA FINALIDADE ESPECIFICA. Consulte a Licenca Publica Geral do
GNU versao 2 para mais detalhes.

Voce deve ter recebido uma copia da Licenca Publica Geral do GNU versao 2 junto
com este programa; se nao, escreva para a Free Software Foundation, Inc., no
endereco 59 Temple Street, Suite 330, Boston, MA 02111-1307 USA.

Para maiores informacoes:
ncl @ telemidia.puc-rio.br
http://www.ncl.org.br
http://www.ginga.org.br
http://www.telemidia.puc-rio.br
******************************************************************************
This file is part of the declarative environment of middleware Ginga (Ginga-NCL)

Copyright: 1989-2007 PUC-RIO/LABORATORIO TELEMIDIA, All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 2 as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License version 2 for more
details.

You should have received a copy of the GNU General Public License version 2
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

For further information contact:
ncl @ telemidia.puc-rio.br
http://www.ncl.org.br
http://www.ginga.org.br
http://www.telemidia.puc-rio.br
*******************************************************************************/


#include "../../config.h"


#include "../../include/adaptation/context/PresentationContext.h"
#include "../../include/adaptation/context/AuthenticationServer.h"


#if HAVE_COMPSUPPORT
#include "cm/IComponentManager.h"
using namespace ::br::pucrio::telemidia::ginga::core::cm;
#else
#include "../../../../gingacc-contextmanager/include/ContextManager.h"
#include "../../../../gingacc-contextmanager/include/system/SystemInfo.h"
#endif

//#if HAVE_WAC 
#include <ginga/wac/state/IStateManager.h>
using namespace ::br::ufscar::lince::ginga::wac::state;

IStateManager* stateManager = NULL;
//#end if


namespace br {
namespace pucrio {
namespace telemidia {
namespace ginga {
namespace ncl {
namespace adaptation {
namespace context {
#if HAVE_COMPSUPPORT
	static IComponentManager* cm = IComponentManager::getCMInstance();
#endif
	PresentationContext::PresentationContext() : ContextBase() {
		createObserversVector();
		contextTable = NULL;

#if HAVE_COMPSUPPORT
		contextManager = ((ContextManagerCreator*)(cm->getObject(
				"ContextManager")))();
#else
		contextManager = ContextManager::getInstance();
#endif

		initializeContext(); // marco 
		// initializeUserContext(); // marco
		// initializeSystemValues(); // marco

//#IF HAVE_WAC
		stateManager = ((StateManagerCreator*)(
					cm->getObject("StateManager")))();

		stateManager->setContextProvider(this);
//#ENDIF


		pthread_mutex_init(&attrMutex, NULL);

		stop = false;
		pthread_create(&aserver, NULL, (void * (*)(void *)) runAuthenticationServer, this);
		cout << ".........................PresentationContext if HAVE_RECOMMENDER" << endl;
#if HAVE_RECOMMENDER
		cout << ".........................PresentationContext has HAVE_RECOMMENDER" << endl;
       		Scheduler* agenda = Scheduler::getInstance();
		cout << "-----------Before if(agenda != NULL)" << endl;
        	if(agenda != NULL){
			cout << "-----------Before agenda->checkRecommenderModule" << endl;
        		agenda->checkRecommenderModule();
        	}
#endif

	}

	PresentationContext::~PresentationContext() {
		cout << "Waiting authentication server to stop..." << endl;
		stop = true;
		pthread_join(aserver, NULL);
		cout << "Authentication server succesfully stopped." << endl;
#if HAVE_RECOMMENDER
		(Scheduler::getInstance())->stop();
		pthread_join(Scheduler::getInstance()->getThread(), NULL);
		cout << "Scheduler succesfully stopped." << endl;
#endif
	}

	void * runAuthenticationServer(void *p) {
		AuthenticationServer as((PresentationContext *)p);
		as.start();
	}

	PresentationContext* PresentationContext::_instance = 0;

	// Marco
	bool PresentationContext::instantiated() {
		return (PresentationContext::_instance != NULL);
	}

	PresentationContext* PresentationContext::getInstance() {
		if (PresentationContext::_instance == NULL) {
			PresentationContext::_instance = new PresentationContext();
		}
		return PresentationContext::_instance;
	}

	void PresentationContext::setPropertyValue(
		    string property, string value) {

		string oldValue = "";
		map<string, string>::iterator i;

		pthread_mutex_lock(&attrMutex);
		if ((property.length() >= 7 && property.substr(0, 7) == "system.") ||
				(property.length() >= 5 && property.substr(0, 5) == "user.")) {

			pthread_mutex_unlock(&attrMutex);
			return;
		}

		i = contextTable->find(property);

		if (i != contextTable->end()) {
			oldValue = i->second;
		}

		(*contextTable)[property] = value;
		pthread_mutex_unlock(&attrMutex);

		if ((value != "") && (value != oldValue)) {
			notifyObservers(&property);
		}
	}

	void PresentationContext::incPropertyValue(string propertyName) {
		string oldValue = "", newValue = "";
		map<string, string>::iterator i;

		i = contextTable->find(propertyName);
		if (i != contextTable->end()) {
			oldValue = i->second;
		}

		if (oldValue == "") {
			return;
		}

		newValue = itos(stof(oldValue) + 1);
		if ((newValue != "") && (newValue != oldValue)) {
			(*contextTable)[propertyName] = newValue;
			notifyObservers(&propertyName);
		}
	}

	void PresentationContext::decPropertyValue(string propertyName) {
		string oldValue = "", newValue = "";
		map<string, string>::iterator i;

		i = contextTable->find(propertyName);
		if (i != contextTable->end()) {
			oldValue = i->second;
		}

		if (oldValue == "") {
			return;
		}

		newValue = itos(stof(oldValue) - 1);
		if ((newValue != "") && (newValue != oldValue)) {
			(*contextTable)[propertyName] = newValue;
			notifyObservers(&propertyName);
		}
	}

	vector<string>* PresentationContext::getPropertyNames() {
		vector<string>* propertyNames = new vector<string>;
		map<string, string>::iterator i;
		for (i = contextTable->begin(); i != contextTable->end(); ++i) {
			propertyNames->push_back(i->first);
		}

		return propertyNames;
	}

	string PresentationContext::getPropertyValue(string attributeId) {
		string propValue;

		pthread_mutex_lock(&attrMutex);
		if (contextTable->count(attributeId) == 0) {
			cout << "PresentationContext::getPropertyValue prop '";
			cout << attributeId << "' has a NULL value" << endl;
			pthread_mutex_unlock(&attrMutex);
			return "";
		}

		/* cout << "PresentationContext::getPropertyValue prop '";
		cout << attributeId << "' = '" << (*contextTable)[attributeId];
		cout << "'" << endl; */

		propValue = (*contextTable)[attributeId];
		pthread_mutex_unlock(&attrMutex);

		return propValue;
	}

	void PresentationContext::initializeUserContext() {
		int currentUserId;

		currentUserId = contextManager->getCurrentUserId();
		contextTable = contextManager->getUserProfile(currentUserId);

		if (contextTable == NULL) {
			contextManager->addContextVar(
					currentUserId, "system.background-color", "000000");

			contextTable = contextManager->getUserProfile(currentUserId);
		}

		initializeUserInfo(currentUserId);
	}

	void PresentationContext::initializeUserInfo(int currentUserId) {
		IGingaUser* user;

		user = contextManager->getUser(currentUserId);
		if (user != NULL) {
			(*contextTable)[USER_AGE] = itos(user->getUserAge());
			(*contextTable)[USER_LOCATION] = user->getUserLocation();
			(*contextTable)[USER_GENRE] = user->getUserGenre();
		}
	}

	void PresentationContext::initializeSystemValues() {
		ISystemInfo* si;
		int w, h;

		cout << "PresentationContext::initializeSystemValues " << endl;
		si = contextManager->getSystemInfo();

		(*contextTable)[SYSTEM_LANGUAGE] = si->getSystemLanguage();
		(*contextTable)[SYSTEM_CAPTION] = si->getCaptionLanguage();
		(*contextTable)[SYSTEM_SUBTITLE] = si->getSubtitleLanguage();
		(*contextTable)[SYSTEM_RETURN_BIT_RATE] = itos(si->getReturnBitRate());

		si->getScreenSize(&w, &h);
		(*contextTable)[SYSTEM_SCREEN_SIZE] = itos(w) + "," + itos(h);

		si->getScreenGraphicSize(&w, &h);
		(*contextTable)[SYSTEM_SCREEN_GRAPHIC_SIZE] = itos(w) + "," + itos(h);
		(*contextTable)[SYSTEM_AUDIO_TYPE] = si->getAudioType();
		(*contextTable)[SYSTEM_CPU] = itos(si->getCPUClock());
		(*contextTable)[SYSTEM_MEMORY] = itos(si->getMemorySize());
		(*contextTable)[SYSTEM_OPERATING_SYSTEM] = si->getOperatingSystem();

		(*contextTable)[SYSTEM_DEVNUMBER + "(0)"] = "0";
		(*contextTable)[SYSTEM_DEVNUMBER + "(1)"] = "0";
		(*contextTable)[SYSTEM_DEVNUMBER + "(2)"] = "0";

		(*contextTable)[SYSTEM_CLASSTYPE + "(0)"] = "base";
		(*contextTable)[SYSTEM_CLASSTYPE + "(1)"] = "passive";
		(*contextTable)[SYSTEM_CLASSTYPE + "(2)"] = "active";

		(*contextTable)[SYSTEM_INFO + "(0)"] = "0";
		(*contextTable)[SYSTEM_INFO + "(1)"] = "1";
		(*contextTable)[SYSTEM_INFO + "(2)"] = "2";

		(*contextTable)[SYSTEM_CLASS_NUMBER] = "3";

		if (contextTable->count(DEFAULT_FOCUS_BORDER_COLOR) == 0) {
			(*contextTable)[DEFAULT_FOCUS_BORDER_COLOR] = "blue";
		}

		if (contextTable->count(DEFAULT_SEL_BORDER_COLOR) == 0) {
			(*contextTable)[DEFAULT_SEL_BORDER_COLOR] = "green";
		}

		if (contextTable->count(DEFAULT_FOCUS_BORDER_WIDTH) == 0) {
			(*contextTable)[DEFAULT_FOCUS_BORDER_WIDTH] = "3";
		}

		if (contextTable->count(DEFAULT_FOCUS_BORDER_TRANSPARENCY) == 0) {
			(*contextTable)[DEFAULT_FOCUS_BORDER_TRANSPARENCY] = "255";
		}
	}

	void PresentationContext::save() {
		string property;
		map<string, string>::iterator i;

		i = contextTable->begin();
		while (i != contextTable->end()) {
			property = i->first;
			if (property.find("system.") == std::string::npos &&
					property.find("default.") == std::string::npos) {

				cout << "--- delete " << property << endl;
				contextTable->erase(i);
				i = contextTable->begin();

			} else {
				++i;
			}
		}
		contextManager->saveUsersAccounts();  // marco: tirei o comentario desta linha
		contextManager->saveUsersProfiles();
	}

	// marco
	IContextManager* PresentationContext::getContextManager(){
		return contextManager;
	}
}
}
}
}
}
}
}
